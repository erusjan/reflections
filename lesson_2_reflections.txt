What happens when you initialize a repository? Why do you need to do it?

When you initialize the repository, git creates a .git directory.
This enables git to work with the repository.

How is the staging area different from the working directory and the repository?What value do you think it offers?

The staging area consists of files scheduled to be committed. It enables you
to preview the commit.

How can you use the staging area to make sure you have one commit 
per logical change?

You add what you want to the staging area (with the git add command)
and then git commit will commit just that and nothing else.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Say you have students working on their own branches and after testing they 
can merge into the master.
Or, you have different features to implement in parallel and you want to have
master always shippable.
Or, you simply branch out release_n to stabilize and then merge back 
into master, which contains the ongoing development.

More thoughts: 
master - your main branch that always works, never breaks
development branch
experimental branch
each feature can have a branch
each bug can have a branch
   so these can be things that you fully expect to break ... 
      and you want to share with the public, but with the understanding that 
      morework is needed to make it quality code
branches are also good to communicate with yourself
   they allow you to context switch
     - work on a feature
     - work on a bug

How do the diagrams help you visualize the branch structure?

They show you the branches and which commits are reachable.

What is the result of merging two branches together? 
Why do we represent it in diagrams the way we do?

Hmm ...?


